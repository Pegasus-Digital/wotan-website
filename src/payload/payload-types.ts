/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    media: Media;
    pages: Page;
    products: Product;
    categories: Category;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    settings: Setting;
    company: Company;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  roles?: ('admin' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  publishedOn?: string | null;
  carousel: {
    image: string | Media;
    id?: string | null;
  }[];
  layout: (
    | {
        title?: string | null;
        description?: string | null;
        populateBy?: ('categories' | 'selection') | null;
        categories?: (string | Category)[] | null;
        limit?: number | null;
        selectedDocs?:
          | {
              relationTo: 'products';
              value: string | Product;
            }[]
          | null;
        populatedDocs?:
          | {
              relationTo: 'products';
              value: string | Product;
            }[]
          | null;
        populatedDocsTotal?: number | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'product-carousel';
      }
    | {
        title?: string | null;
        description?: string | null;
        cards?:
          | {
              title?: string | null;
              description?: string | null;
              image?: string | Media | null;
              linkTo?:
                | ({
                    relationTo: 'categories';
                    value: string | Category;
                  } | null)
                | ({
                    relationTo: 'products';
                    value: string | Product;
                  } | null);
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'featured-section';
      }
    | {
        title?: string | null;
        description?: string | null;
        statistics?:
          | {
              title?: string | null;
              value?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'statistic-section';
      }
  )[];
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  title: string;
  publishedOn?: string | null;
  sku?: string | null;
  minimumQuantity?: number | null;
  images?: string | Media | null;
  categories?: (string | Category)[] | null;
  relatedProducts?: (string | Product)[] | null;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  general: {
    darkMode?: boolean | null;
  };
  header: {
    navigation: {
      logo: string | Media;
      style: 'classic' | 'dropdown' | 'megaMenu';
      links: {
        title?: string | null;
        onlyLink: boolean;
        href?: string | null;
        columns?:
          | {
              type?: ('linkCol' | 'card') | null;
              content?: {
                title?: string | null;
                description?: string | null;
              };
              linkColumn?:
                | {
                    title?: string | null;
                    href?: string | null;
                    description?: string | null;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
            }[]
          | null;
        subLinks?:
          | {
              title?: string | null;
              href?: string | null;
              description?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[];
    };
  };
  footer: {
    logo: string | Media;
    companyInfo?: {
      showAddress?: boolean | null;
      showPhone?: boolean | null;
      showEmail?: boolean | null;
      showSocial?: boolean | null;
    };
    columns?:
      | {
          title?: string | null;
          href?: string | null;
          links?:
            | {
                title?: string | null;
                href?: string | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company".
 */
export interface Company {
  id: string;
  general: {
    name?: string | null;
    founded?: string | null;
    cnpj?: string | null;
  };
  adress: {
    adress?: {
      street?: string | null;
      number?: string | null;
      neighborhood?: string | null;
      city?: string | null;
      state?:
        | (
            | 'AC'
            | 'AL'
            | 'AP'
            | 'AM'
            | 'BA'
            | 'CE'
            | 'DF'
            | 'ES'
            | 'GO'
            | 'MA'
            | 'MS'
            | 'MT'
            | 'MG'
            | 'PA'
            | 'PB'
            | 'PR'
            | 'PE'
            | 'PI'
            | 'RJ'
            | 'RN'
            | 'RS'
            | 'RO'
            | 'RR'
            | 'SC'
            | 'SP'
            | 'SE'
            | 'TO'
          )
        | null;
      cep?: string | null;
    };
    googleMaps?: string | null;
  };
  contact: {
    email?: string | null;
    phone?: string | null;
    whatsapp?: string | null;
  };
  social: {
    facebook?: string | null;
    instagram?: string | null;
    linkedin?: string | null;
    twitter?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}